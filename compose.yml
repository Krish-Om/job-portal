services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: job-portal-postgres-dev
    env_file:
      - ./backend/.env.dev
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=devdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5430:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - job-portal-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: job-portal-backend
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - ./backend/.env.dev
    ports:
      - "8080:8000"
    volumes:
      - ./backend:/app/backend
      - /app/backend/__pycache__
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - job-portal-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: job-portal-frontend
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - ./frontend/.env
    ports:
      - "5175:5173"
    volumes:
      - ./frontend/src:/app/frontend/src
      - ./frontend/public:/app/frontend/public
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:5175 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - job-portal-network
    restart: unless-stopped

  # Development Frontend (alternative)
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: job-portal-frontend-dev
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - ./frontend/.env.development
    ports:
      - "5174:5173"
    volumes:
      - ./frontend:/app/frontend
      - /app/frontend/node_modules
    networks:
      - job-portal-network
    restart: unless-stopped
    profiles:
      - dev

  # S3-Compatible Object Storage (MinIO)
  minio:
    image: minio/minio:latest
    container_name: job-portal-minio
    env_file:
      - ./.env.minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web UI
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - job-portal-network
    restart: unless-stopped

  # MinIO setup service (creates buckets and users)
  minio-setup:
    image: minio/mc
    container_name: job-portal-minio-setup
    env_file:
      - ./.env.minio
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - job-portal-network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    entrypoint: >
      /bin/sh -c "/usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin; /usr/bin/mc mb --ignore-existing myminio/job-portal-resumes; /usr/bin/mc policy set download myminio/job-portal-resumes; exit 0;"

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  job-portal-network:
    driver: bridge
